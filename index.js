const express = require('express');
const Mongoose = require('mongoose');
const cors = require('cors');


const app = express();
app.use(express.json());
app.use(cors({
    origin: '*',
    methods: 'GET,POST,PUT,DELETE',
    allowedHeaders: ['Content-Type', 'Authorization']
}))

const port = 3000;

const WarpEventSchema = new Mongoose.Schema({
    lng: Number, // required
    lat: Number, // required
    title: String, // required
    time: Number, // generated by server
    sharedCount: Number, // generated by server
    description: String, // optional
    category: String, // required
    base64image: String, // optional
});
const WarpEventModel = Mongoose.model('WarpEvent', WarpEventSchema);

const WarpEventVoteSchema = new Mongoose.Schema({
    userId: String, // required
    warpEventId: String, // required
    vote: Number, // required
});
const WarpEventVoteModel = Mongoose.model('WarpEventVote', WarpEventVoteSchema);

const WarpEventCommentSchema = new Mongoose.Schema({
    userId: String, // required
    warpEventId: String, // required
    text: String, // required
    time: Number, // generated by server
});
const WarpEventCommentModel = Mongoose.model('WarpEventComment', WarpEventCommentSchema);



Mongoose.connect('mongodb://localhost:27017/', {directConnection: true});


app.post('/api/warp_event', async (req, res) => {
    if (!req.body.lng || !req.body.lat || !req.body.title || !req.body.category) {
        res.status(400).json({
            error: 'Missing required fields',
        });
        res.end();
        return;
    }

    const newWarpEvent = new WarpEventModel({
        lng: req.body.lng,
        lat: req.body.lat,
        title: req.body.title,
        time: new Date(),
        description: req.body.description,
        category: req.body.category,
        sharedCount: 0,
        base64image: req.body.base64image,
    });
    await newWarpEvent.save();

    res.json({
        id: newWarpEvent.id,
    });
    res.end();
})

app.put('/api/warp_event/:id/share', async (req, res) => {
    const warpEvent = await WarpEventModel.findById(req.params.id);
    if (!warpEvent) {
        res.status(404).json({
            error: 'WarpEvent not found',
        });
        res.end();
        return;
    }

    warpEvent.sharedCount++;
    await warpEvent.save();

    res.json({
        sharedCount: warpEvent.sharedCount,
    });
    res.end();
})

app.get('/api/warp_event/:id', async (req, res) => {
    var warpEvent = await WarpEventModel.findById(req.params.id);
    if (!warpEvent) {
        res.status(404).json({
            error: 'WarpEvent not found',
        });
        res.end();
        return;
    }

    var upvotes = 0;
    var downvotes = 0;
    const votes = await WarpEventVoteModel.find({
        warpEventId: req.params.id,
    });
    for (const vote of votes) {
        if (vote.vote === 1) {
            upvotes++;
        } else if (vote.vote === -1) {
            downvotes++;
        }
    }

    const comments = await WarpEventCommentModel.find({
        warpEventId: req.params.id,
    });

    warpEvent = warpEvent.toObject();
    warpEvent.upvotes = upvotes;
    warpEvent.downvotes = downvotes;
    warpEvent.comments = comments;
    

    res.json(warpEvent);
    res.end();
})

app.post('/api/warp_event/getByAABBRange', async (req, res) => {
    if (!req.body.LngA || !req.body.LngB || !req.body.LatA || !req.body.LatB) {
        res.status(400).json({
            error: 'Missing required fields',
        });
        res.end();
        return;
    }

    var minLng = Math.min(req.body.LngA, req.body.LngB);
    var maxLng = Math.max(req.body.LngA, req.body.LngB);
    var minLat = Math.min(req.body.LatA, req.body.LatB);
    var maxLat = Math.max(req.body.LatA, req.body.LatB);


    const warpEvents = await WarpEventModel.find({
        lng: { $gte: minLng, $lte: maxLng },
        lat: { $gte: minLat, $lte: maxLat },
    });

    res.json(warpEvents);
    res.end();
})

app.post('/api/warp_event/getByCategory', async (req, res) => {
    if (!req.body.category) {
        res.status(400).json({
            error: 'Missing required fields',
        });
        res.end();
        return;
    }

    const warpEvents = await WarpEventModel.find();
    var warpEventsFiltered = [];
    for (const warpEventDbReference of warpEvents) {
        
        if (!warpEventDbReference.category) continue;
        if (warpEventDbReference.category.includes(req.body.category)) {
            var warpEvent = warpEventDbReference.toObject();
            var upvotes = 0;
            var downvotes = 0;
            const votes = await WarpEventVoteModel.find({
                warpEventId: req.params.id,
            });
            for (const vote of votes) {
                if (vote.vote === 1) {
                    upvotes++;
                }
                else if (vote.vote === -1) {
                    downvotes++;
                }
            }    
            const comments = await WarpEventCommentModel.find({
                warpEventId: warpEvent.id,
            });
            warpEvent.comments = comments;
            warpEvent.upvotes = upvotes;
            warpEvent.downvotes = downvotes;
            

            warpEventsFiltered.push(warpEvent);
        }


    }

    res.json(warpEventsFiltered);
    res.end();
});

app.get('/api/warp_event/:id/vote', async (req, res) => {
    if (!req.query.userId) {
        res.status(400).json({
            error: 'Missing required fields',
        });
        res.end();
        return;
    }

    const warpEvent = await WarpEventModel.findById(req.params.id);
    if (!warpEvent) {
        res.status(404).json({
            error: 'WarpEvent not found',
        });
        res.end();
        return;
    }

    const votes = await WarpEventVoteModel.find({
        warpEventId: req.params.id,
    });

    var voteStatus = 0;
    for (const vote of votes) {
        if (vote.userId === req.query.userId) {
            voteStatus = vote.vote;
            break;
        }
    }

    res.json({
        vote: voteStatus,
    });
    res.end();
})

app.put('/api/warp_event/:id/vote', async (req, res) => {
    if (!req.body.userId || ![-1, 0, 1].includes(req.body.vote)) {
        res.status(400).json({
            error: 'Missing required fields',
        });
        res.end();
        return;
    }

    const warpEvent = await WarpEventModel.findById(req.params.id);
    if (!warpEvent) {
        res.status(404).json({
            error: 'WarpEvent not found',
        });
        res.end();
        return;
    }

    await WarpEventVoteModel.deleteMany({
        userId: req.body.userId,
        warpEventId: req.params.id,
    });

    const newVote = new WarpEventVoteModel({
        userId: req.body.userId,
        warpEventId: req.params.id,
        vote: req.body.vote,
    });
    await newVote.save();

    res.json({
        id: newVote.id,
    });
    res.end();
})

app.post('/api/warp_event/:id/comment', async (req, res) => {
    if (!req.body.userId || !req.body.text) {
        res.status(400).json({
            error: 'Missing required fields',
        });
        res.end();
        return;
    }

    const warpEvent = await WarpEventModel.findById(req.params.id);
    if (!warpEvent) {
        res.status(404).json({
            error: 'WarpEvent not found',
        });
        res.end();
        return;
    }

    const newComment = new WarpEventCommentModel({
        userId: req.body.userId,
        warpEventId: req.params.id,
        text: req.body.text,
        time: new Date(),
    });
    await newComment.save();

    res.json({
        id: newComment.id,
    });
    res.end();
})

app.delete('/api/warp_event/:id/comment/:commentId', async (req, res) => {
    const comment = await WarpEventCommentModel.findById(req.params.commentId);
    if (!comment) {
        res.status(404).json({
            error: 'Comment not found',
        });
        res.end();
        return;
    }

    await WarpEventCommentModel.findByIdAndDelete(req.params.commentId);
    res.status(200).json({
        message: "Comment deleted",
    });
    res.end();
})

app.get('/api/warp_event/:id/comment/:commentId', async (req, res) => {
    const comment = await WarpEventCommentModel.findById(req.params.commentId);
    if (!comment) {
        res.status(404).json({
            error: 'Comment not found',
        });
        res.end();
        return;
    }

    res.json(comment);
    res.end();
})

app.purge('/api/resetDB', async (req, res) => {
    await WarpEventModel.deleteMany({});
    await WarpEventVoteModel.deleteMany({});
    await WarpEventCommentModel.deleteMany({});
    res.status(200).json({
        message: "Database reset",
    });
    res.end();
})

app.listen(port, '0.0.0.0', () => {
    console.log(`Server is running on http://0.0.0.0:${port}`);
});